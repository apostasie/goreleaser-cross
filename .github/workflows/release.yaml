name: release
on:
  push:
    tags:
      - v*

env:
  GO111MODULE: on
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Checkout code
        uses: actions/checkout@v3
      - run: git fetch --prune --unshallow
      - name: Setup env
        uses: c-py/action-dotenv-to-setenv@v3
        with:
          env-file: .env
      - name: Define and set tags
        shell: bash
        id: meta
        run: |
          cross_tags="$(./scripts/image-tags.sh cross)"
          cross_base_tags="$(./scripts/image-tags.sh cross-base)"

          echo 'cross_tags<<EOF' >> $GITHUB_OUTPUT
          echo "$cross_tags" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

          echo 'cross_base_tags<<EOF' >> $GITHUB_OUTPUT
          echo "$cross_base_tags" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
      - name: Set docker push behavior
        uses: tj-actions/branch-names@v6
        id: branch-name
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Install cosign
        uses: sigstore/cosign-installer@main
      - uses: actions/setup-go@v3
        with:
          go-version: "${{ env.GO_VERSION }}"
      - name: Install git-chglog
        run: go install github.com/git-chglog/git-chglog/cmd/git-chglog@${{ env.GIT_CHGLOG_VERSION }}
      - name: Build and push base images
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ steps.branch-name.outputs.is_tag }}
          file: Dockerfile.base
          tags: ${{ steps.meta.outputs.cross_base_tags }}
          build-args: |
            "GO_VERSION=${{env.GO_VERSION}}"
            "GORELEASER_VERSION=${{env.GORELEASER_VERSION}}"
            "TINI_VERSION=${{env.TINI_VERSION}}"
            "COSIGN_VERSION=${{env.COSIGN_VERSION}}"
            "COSIGN_SHA256=${{env.COSIGN_SHA256}}"
            "DEBIAN_FRONTEND=${{env.DEBIAN_FRONTEND}}"
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ steps.branch-name.outputs.is_tag }}
          tags: ${{ steps.meta.outputs.cross_tags }}
          build-args: |
            "GO_VERSION=${{env.GO_VERSION}}"
            "OSX_SDK=${{env.OSX_SDK}}"
            "OSX_SDK_SUM=${{env.OSX_SDK_SUM}}"
            "OSX_VERSION_MIN=${{env.OSX_VERSION_MIN}}"
            "OSX_CROSS_COMMIT=${{env.OSX_CROSS_COMMIT}}"
            "DEBIAN_FRONTEND=${{env.DEBIAN_FRONTEND}}"
#      - name: Sign images
#        if: (${{ steps.branch-name.outputs.is_tag }} == true)
#        run: |
#          while IFS=$'\n' read -r line; do
#              base_name=$(echo "$line" | cut -d ":" -f 1)
#              docker pull $line
#
#              id=$(docker image inspect "$line" --format='{{.Id}}')
#
#              cosign sign --upload=${{ steps.branch-name.outputs.is_tag }} --key env://COSIGN_PRIVATE_KEY --recursive $base_name@$id
#          done <<< "${{ steps.meta.outputs.cross_base_tags }}"
#
#          while IFS=$'\n' read -r line; do
#              base_name=$(echo "$line" | cut -d ":" -f 1)
#              docker pull $line
#
#              id=$(docker image inspect "$line" --format='{{.Id}}')
#
#              cosign sign --upload=${{ steps.branch-name.outputs.is_tag }} --key env://COSIGN_PRIVATE_KEY --recursive $base_name@$id
#          done <<< "${{ steps.meta.outputs.cross_tags }}"
#        env:
#          COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
#          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
      - if: (${{ steps.branch-name.outputs.is_tag }} == true)
        name: Generate changelog
        run: make gen-changelog
      - if: (${{ steps.branch-name.outputs.is_tag }} == true)
        name: Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: changelog.md
